import React, { useEffect, useCallback, useState } from 'react'; // Added useState
import { useForm, Controller, useFieldArray, type Control, type FieldError } from 'react-hook-form'; // Added FieldError
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useNavigate, useParams } from 'react-router-dom';
import { useAppDispatch } from '../../hooks/useAppDispatch';
import { useAppSelector } from '../../hooks/useAppSelector';
import {
    fetchAdminProjectById,
    createAdminProject,
    updateAdminProjectThunk,
    setCurrentProject,
    clearProjectMessages,
} from '../../store/features/projects/projectSlice';
import {
    selectCurrentAdminProject,
    selectIsAdminProjectLoadingDetails,
    selectIsAdminProjectSaving,
    selectAdminProjectDetailsError,
    selectAdminProjectSaveError,
} from '../../store/features/projects/projectSlice';
import type { IProject, ProjectImage as ProjectImageType } from '../../types';

// Zod schema for validation based on F-FR3.4
const projectImageSchema = z.object({
    _id: z.string().optional(),
    url: z.string().url({ message: 'Image URL must be a valid URL.' }).min(1, 'Image URL is required.'),
    altText: z.string().min(5, 'Alt text for image must be at least 5 characters.'), // Updated min length
    isThumbnail: z.boolean().optional(),
});

const projectFormSchema = z.object({
    title: z.string().min(3, 'Title must be at least 3 characters long.'),
    shortSummary: z.string().min(10, 'Short summary must be at least 10 characters long.'), // Updated min length
    description: z.string().min(10, 'Description is required and must be at least 10 characters long.'), // Ensured min length matches API doc
    technologies: z.array(z.string().min(1, "Technology cannot be empty")).min(1, 'At least one technology is required.'),
    role: z.string().min(3, 'Role must be at least 3 characters long.'), // Updated min length
    challenges: z.string().min(10, 'Challenges description must be at least 10 characters long.'), // Updated min length
    liveDemoUrl: z.string().url({ message: 'Invalid URL format for live demo.' }).optional().or(z.literal('')),
    sourceCodeUrl: z.string().url({ message: 'Invalid URL format for source code.' }).optional().or(z.literal('')),
    images: z.array(projectImageSchema).min(1, 'At least one image is required.'), // Made required and min 1
    status: z.enum(['draft', 'published'], { required_error: 'Status is required.' }), // Made status explicitly required
    order: z.number({ invalid_type_error: 'Order must be a number.' }).optional(),
    featured: z.boolean().optional(),
    slug: z.string().optional(), // Slug is auto-generated by backend, display only
});

type ProjectFormData = z.infer<typeof projectFormSchema>;

// Define a more specific type for the onChange handler if possible, or use a generic one from react-hook-form
// For example, if technologies is always string[], you could be more specific.
// For now, using a general approach that should work with Controller's onChange.

const ProjectFormPage: React.FC = () => {
    const dispatch = useAppDispatch();
    const navigate = useNavigate();
    const { id: projectId } = useParams<{ id: string }>();

    const currentProject = useAppSelector(selectCurrentAdminProject);
    const isLoadingDetails = useAppSelector(selectIsAdminProjectLoadingDetails);
    const isSaving = useAppSelector(selectIsAdminProjectSaving);
    const detailsError = useAppSelector(selectAdminProjectDetailsError);
    const saveError = useAppSelector(selectAdminProjectSaveError);

    const isEditMode = Boolean(projectId);

    // State for the raw technologies input string
    const [technologiesString, setTechnologiesString] = useState('');

    const {
        control,
        register,
        handleSubmit,
        reset,
        setValue,
        getValues,
        formState: { errors, isDirty, isValid }, // Added isValid for better button state
    } = useForm<ProjectFormData>({
        resolver: zodResolver(projectFormSchema),
        defaultValues: {
            title: '',
            shortSummary: '',
            description: '',
            technologies: [],
            role: '',
            challenges: '',
            liveDemoUrl: '',
            sourceCodeUrl: '',
            images: [{ url: '', altText: '', isThumbnail: false }], // altText is non-optional string
            status: 'draft',
            order: 0, // Default order to 0 as per schema (optional but good to have a default)
            featured: false,
            slug: '',
        },
    });

    const { fields, append, remove } = useFieldArray<ProjectFormData, 'images', 'id'>({
        control: control as Control<ProjectFormData>, // Explicit cast if needed
        name: 'images',
    });

    const resetForm = useCallback((project?: IProject | null) => {
        if (project) {
            const projectDataToReset: ProjectFormData = {
                title: project.title || '',
                shortSummary: project.shortSummary || '',
                description: project.description || '',
                technologies: project.technologies || [],
                role: project.role || '',
                challenges: project.challenges || '',
                liveDemoUrl: project.liveDemoUrl || '', // Corrected: directly use the string property
                sourceCodeUrl: project.sourceCodeUrl || '', // Corrected: directly use the string property
                images: project.images?.length
                    ? project.images.map(img => ({
                        ...img,
                        altText: img.altText || '', // Ensure altText is always a string
                        _id: img._id || undefined
                    }))
                    : [{ url: '', altText: '', isThumbnail: false }],
                status: project.status || 'draft',
                order: project.order || 0,
                featured: project.featured || false,
                slug: project.slug || '',
            };
            reset(projectDataToReset);
            setTechnologiesString(project.technologies?.join(', ') || '');
        } else {
            reset({
                title: '',
                shortSummary: '',
                description: '',
                technologies: [],
                role: '',
                challenges: '',
                liveDemoUrl: '',
                sourceCodeUrl: '',
                images: [{ url: '', altText: '', isThumbnail: false }], // altText is non-optional string
                status: 'draft',
                order: 0,
                featured: false,
                slug: '',
            });
            setTechnologiesString('');
        }
    }, [reset]);


    useEffect(() => {
        dispatch(clearProjectMessages());
        if (isEditMode && projectId) {
            dispatch(fetchAdminProjectById(projectId));
        } else {
            dispatch(setCurrentProject(null));
            resetForm(null);
        }
        return () => {
            dispatch(clearProjectMessages());
        };
    }, [dispatch, projectId, isEditMode, resetForm]);

    useEffect(() => {
        if (isEditMode && currentProject) {
            resetForm(currentProject);
        }
    }, [currentProject, isEditMode, resetForm]);

    const onSubmit = async (data: ProjectFormData) => {
        // Destructure all fields from data, which is validated by Zod on the frontend
        const {
            title,
            shortSummary,
            description,
            technologies,
            role,
            challenges,
            liveDemoUrl, // Direct field from form data
            sourceCodeUrl, // Direct field from form data
            images,
            status,
            order,
            featured,
        } = data;

        const processedImages: ProjectImageType[] = images
            .filter(img => img.url && img.url.trim() !== '')
            .map(img => ({
                _id: img._id || undefined,
                url: img.url,
                altText: img.altText, // altText is already required string in ProjectFormData
                isThumbnail: img.isThumbnail || false,
            }));

        const payloadToSend: Partial<IProject> = {
            title: title || "",
            shortSummary: shortSummary || "",
            description: description || "",
            technologies: technologies || [],
            role: role || "",
            challenges: challenges || "",
            images: processedImages.length > 0 ? processedImages : [],
            status: status || 'draft',
            liveDemoUrl: liveDemoUrl || undefined, // Send undefined if empty string to ensure optionality
            sourceCodeUrl: sourceCodeUrl || undefined, // Send undefined if empty string
            order: (order === undefined || order === null) ? undefined : Number(order),
            featured: (featured === undefined || featured === null) ? undefined : Boolean(featured),
        };

        if (isEditMode && projectId) {
            payloadToSend._id = projectId;
            if (currentProject?.slug) {
                payloadToSend.slug = currentProject.slug; // Preserve slug on update
            }
        } else {
            // For create, ensure _id and slug are not sent if they somehow got in
            delete payloadToSend._id;
            delete payloadToSend.slug;
        }

        try {
            if (isEditMode && projectId) {
                // Assuming you have a thunk like `updateAdminProject` or a generic save thunk
                // Adjust this line if your update thunk has a different name or signature
                await dispatch(updateAdminProjectThunk({ id: projectId, projectData: payloadToSend })).unwrap();
                // Consider navigating to the updated project's view page or back to the list
                navigate(`/admin/projects`);
            } else {
                await dispatch(createAdminProject(payloadToSend)).unwrap();
                navigate('/admin/projects'); // Navigate to projects list after creation
            }
        } catch (err) {
            console.error("Save failed:", err);
            // The error should be caught by the slice and reflected in `saveError` state,
            // which is already handled in the form's UI.
        }
    };


    const handleThumbnailChange = (selectedIndex: number) => {
        const currentImages = getValues('images');
        const newImages = currentImages?.map((image, idx) => ({
            ...(image as ProjectImageType),
            altText: image.altText || '', // Ensure altText is always a string
            isThumbnail: idx === selectedIndex,
        }));
        if (newImages) {
            // Ensure the structure matches ProjectFormData['images']
            const imagesForForm: Array<{ _id?: string; url: string; altText: string; isThumbnail?: boolean }> = newImages.map(img => ({
                _id: img._id,
                url: img.url,
                altText: img.altText || '', // Explicitly ensure altText is a string
                isThumbnail: img.isThumbnail,
            }));
            setValue('images', imagesForForm, { shouldDirty: true });
        }
    };


    if (isLoadingDetails && isEditMode) return <div className="p-6 text-center text-gray-300">Loading project details...</div>;
    if (detailsError && isEditMode) return <div className="p-6 text-red-400 bg-red-900 rounded-md text-center">Error loading project: {detailsError}</div>;

    return (
        <div className="container mx-auto p-4 md:p-8 bg-gray-900 text-white min-h-screen">
            <button onClick={() => navigate('/admin/projects')} className="mb-6 text-indigo-400 hover:text-indigo-300 transition-colors duration-150">
                &larr; Back to Projects
            </button>
            <h1 className="text-3xl md:text-4xl font-bold mb-8 text-center text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-pink-500">
                {isEditMode ? 'Edit Project' : 'Create New Project'}
            </h1>
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-8 max-w-4xl mx-auto bg-gray-800 p-6 md:p-10 rounded-xl shadow-2xl">
                {/* Display general save error if present */}
                {saveError && (
                    <div role="alert" className="alert alert-error mb-4">
                        <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2 2m2-2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                        <span>Error saving project: {typeof saveError === 'string' ? saveError : 'An unexpected error occurred.'}</span>
                    </div>
                )}

                {/* Title Field */}
                <div>
                    <label htmlFor="title" className="block text-sm font-medium text-gray-300 mb-1">Title <span className="text-red-500">*</span></label>
                    <input
                        id="title"
                        type="text"
                        {...register("title")}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                        aria-invalid={errors.title ? "true" : "false"}
                    />
                    {errors.title && <p className="mt-1 text-xs text-red-400">{errors.title.message}</p>}
                </div>

                {/* Short Summary Field */}
                <div>
                    <label htmlFor="shortSummary" className="block text-sm font-medium text-gray-300 mb-1">Short Summary <span className="text-red-500">*</span></label>
                    <textarea
                        id="shortSummary"
                        rows={3}
                        {...register("shortSummary")}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                        aria-invalid={errors.shortSummary ? "true" : "false"}
                    />
                    {errors.shortSummary && <p className="mt-1 text-xs text-red-400">{errors.shortSummary.message}</p>}
                </div>

                {/* Description Field */}
                <div>
                    <label htmlFor="description" className="block text-sm font-medium text-gray-300 mb-1">Description <span className="text-red-500">*</span></label>
                    <textarea
                        id="description"
                        rows={6}
                        {...register("description")}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                        placeholder="Enter project description. Markdown is supported."
                        aria-invalid={errors.description ? "true" : "false"}
                    />
                    {errors.description && <p className="mt-1 text-xs text-red-400">{errors.description.message}</p>}
                </div>

                {/* Technologies Field */}
                <div>
                    <label htmlFor="technologies" className="block text-sm font-medium text-gray-300 mb-1">Technologies (comma-separated) <span className="text-red-500">*</span></label>
                    <Controller
                        name="technologies"
                        control={control}
                        render={({ field }) => ( // field.value is string[], field.onChange expects string[]
                            <input
                                id="technologies"
                                type="text"
                                value={technologiesString} // Controlled by local state
                                onChange={(e) => {
                                    setTechnologiesString(e.target.value); // Update local string for immediate input feedback
                                    const newArray = e.target.value
                                        .split(',')
                                        .map(s => s.trim())
                                        .filter(s => s); // Create the array for RHF
                                    field.onChange(newArray); // Update RHF state with the array
                                }}
                                onBlur={() => { // Optional: sync and reformat on blur
                                    const newArray = technologiesString
                                        .split(',')
                                        .map(s => s.trim())
                                        .filter(s => s);
                                    field.onChange(newArray); // Ensure RHF has the clean array
                                    setTechnologiesString(newArray.join(', ')); // Reformat the input string
                                    if (field.onBlur) field.onBlur(); // Call RHF's onBlur
                                }}
                                name={field.name} // Keep RHF's name prop
                                ref={field.ref} // Keep RHF's ref prop
                                className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                                placeholder="e.g., React, Node.js, TypeScript"
                                aria-invalid={errors.technologies ? "true" : "false"}
                            />
                        )}
                    />
                    {errors.technologies && <p className="mt-1 text-xs text-red-400">{errors.technologies.message || (errors.technologies as unknown as FieldError[]).map(e => e.message).join(', ')}</p>}
                </div>

                {/* Role Field */}
                <div>
                    <label htmlFor="role" className="block text-sm font-medium text-gray-300 mb-1">Role <span className="text-red-500">*</span></label>
                    <input
                        id="role"
                        type="text"
                        {...register("role")}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                        aria-invalid={errors.role ? "true" : "false"}
                    />
                    {errors.role && <p className="mt-1 text-xs text-red-400">{errors.role.message}</p>}
                </div>

                {/* Challenges Field */}
                <div>
                    <label htmlFor="challenges" className="block text-sm font-medium text-gray-300 mb-1">Challenges <span className="text-red-500">*</span></label>
                    <textarea
                        id="challenges"
                        rows={3}
                        {...register("challenges")}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                        aria-invalid={errors.challenges ? "true" : "false"}
                    />
                    {errors.challenges && <p className="mt-1 text-xs text-red-400">{errors.challenges.message}</p>}
                </div>

                {/* Live Demo URL Field */}
                <div>
                    <label htmlFor="liveDemoUrl" className="block text-sm font-medium text-gray-300 mb-1">Live Demo URL</label>
                    <input
                        id="liveDemoUrl"
                        type="url"
                        {...register("liveDemoUrl")}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                        placeholder="https://example.com/demo"
                        aria-invalid={errors.liveDemoUrl ? "true" : "false"}
                    />
                    {errors.liveDemoUrl && <p className="mt-1 text-xs text-red-400">{errors.liveDemoUrl.message}</p>}
                </div>

                {/* Source Code URL Field */}
                <div>
                    <label htmlFor="sourceCodeUrl" className="block text-sm font-medium text-gray-300 mb-1">Source Code URL</label>
                    <input
                        id="sourceCodeUrl"
                        type="url"
                        {...register("sourceCodeUrl")}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                        placeholder="https://github.com/user/repo"
                        aria-invalid={errors.sourceCodeUrl ? "true" : "false"}
                    />
                    {errors.sourceCodeUrl && <p className="mt-1 text-xs text-red-400">{errors.sourceCodeUrl.message}</p>}
                </div>

                {/* Images Field Array - Ensure this section is fully implemented with register or Controller for each sub-field */}
                <div className="space-y-6 p-4 border border-gray-700 rounded-lg bg-gray-800 shadow-inner">
                    <h3 className="text-xl font-semibold text-gray-200 mb-4">Project Images</h3>
                    {fields.map((item: ProjectImageType & { id: string }, index: number) => (
                        <div key={item.id} className="p-4 border border-gray-600 rounded-md space-y-4 bg-gray-700 bg-opacity-50 shadow-md">
                            <div className="flex justify-between items-center">
                                <h4 className="text-md font-medium text-gray-300">Image {index + 1}</h4>
                                {fields.length > 1 && (
                                    <button
                                        type="button"
                                        onClick={() => remove(index)}
                                        className="text-red-400 hover:text-red-300 text-sm font-medium transition-colors duration-150"
                                        aria-label={`Remove image ${index + 1}`}
                                    >
                                        Remove
                                    </button>
                                )}
                            </div>
                            <div>
                                <label htmlFor={`images.${index}.url`} className="block text-xs font-medium text-gray-400 mb-1">URL <span className="text-red-400">*</span></label>
                                <input
                                    id={`images.${index}.url`}
                                    type="url"
                                    {...register(`images.${index}.url` as const)}
                                    className="w-full p-2.5 bg-gray-600 border border-gray-500 rounded-md text-white text-sm focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-150"
                                    placeholder="https://example.com/image.jpg"
                                    aria-invalid={errors.images?.[index]?.url ? "true" : "false"}
                                />
                                {errors.images?.[index]?.url && <p role="alert" className="mt-1 text-xs text-red-400">{errors.images?.[index]?.url?.message}</p>}
                            </div>
                            <div>
                                <label htmlFor={`images.${index}.altText`} className="block text-xs font-medium text-gray-400 mb-1">Alt Text <span className="text-red-400">*</span></label>
                                <input
                                    id={`images.${index}.altText`}
                                    type="text"
                                    {...register(`images.${index}.altText` as const)}
                                    className="w-full p-2.5 bg-gray-600 border border-gray-500 rounded-md text-white text-sm focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 transition-colors duration-150"
                                    placeholder="Descriptive text for the image"
                                />
                                {errors.images?.[index]?.altText && <p role="alert" className="mt-1 text-xs text-red-400">{errors.images?.[index]?.altText?.message}</p>}
                            </div>
                            <div className="flex items-center mt-2">
                                <Controller
                                    name={`images.${index}.isThumbnail` as const}
                                    control={control}
                                    render={({ field }) => (
                                        <input
                                            id={`images.${index}.isThumbnail`}
                                            type="checkbox"
                                            checked={field.value || false}
                                            onChange={(e) => {
                                                field.onChange(e.target.checked);
                                                if (e.target.checked) {
                                                    handleThumbnailChange(index);
                                                }
                                            }}
                                            className="h-4 w-4 text-indigo-500 border-gray-500 rounded bg-gray-600 focus:ring-indigo-400 focus:ring-offset-gray-700 transition-colors duration-150"
                                        />
                                    )}
                                />
                                <label htmlFor={`images.${index}.isThumbnail`} className="ml-2.5 block text-sm text-gray-300">
                                    Set as Thumbnail
                                </label>
                            </div>
                        </div>
                    ))}
                    <button
                        type="button"
                        onClick={() => append({ url: '', altText: '', isThumbnail: fields.length === 0 } as { url: string; altText: string; isThumbnail: boolean; _id?: string }, { shouldFocus: false })}
                        className="px-5 py-2.5 text-sm font-medium bg-indigo-600 hover:bg-indigo-700 rounded-md text-white transition-colors duration-150 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:ring-offset-gray-800"
                    >
                        Add Another Image
                    </button>
                </div>

                {/* Status Field */}
                <div>
                    <label htmlFor="status" className="block text-sm font-medium text-gray-300 mb-1">Status <span className="text-red-500">*</span></label>
                    <select
                        id="status"
                        {...register("status")}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                        aria-invalid={errors.status ? "true" : "false"}
                    >
                        <option value="draft">Draft</option>
                        <option value="published">Published</option>
                    </select>
                    {errors.status && <p className="mt-1 text-xs text-red-400">{errors.status.message}</p>}
                </div>

                {/* Order Field */}
                <div>
                    <label htmlFor="order" className="block text-sm font-medium text-gray-300 mb-1">Order</label>
                    <input
                        id="order"
                        type="number"
                        {...register("order", { valueAsNumber: true })}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 text-white shadow-sm transition-colors duration-150"
                    />
                    {errors.order && <p className="mt-1 text-xs text-red-400">{errors.order.message}</p>}
                </div>

                {/* Featured Field */}
                <div className="flex items-center">
                    <input
                        id="featured"
                        type="checkbox"
                        {...register("featured")}
                        className="h-4 w-4 text-indigo-600 border-gray-600 rounded bg-gray-700 focus:ring-indigo-500"
                    />
                    <label htmlFor="featured" className="ml-2 block text-sm text-gray-300">
                        Featured Project
                    </label>
                </div>

                {/* Slug Field (Display Only) */}
                {isEditMode && currentProject?.slug && (
                    <div>
                        <label htmlFor="slug" className="block text-sm font-medium text-gray-300 mb-1">Slug (auto-generated)</label>
                        <input
                            id="slug"
                            type="text"
                            value={currentProject.slug}
                            readOnly
                            className="w-full p-3 bg-gray-600 border border-gray-500 rounded-md text-gray-400 cursor-not-allowed"
                        />
                    </div>
                )}

                <div className="flex justify-end space-x-4">
                    <button
                        type="button"
                        onClick={() => resetForm(isEditMode ? currentProject : null)}
                        className="px-6 py-2 border border-gray-600 rounded-md text-gray-300 hover:bg-gray-700 transition-colors duration-150"
                        disabled={isSaving}
                    >
                        Reset
                    </button>
                    <button
                        type="submit"
                        className="px-6 py-2 bg-gradient-to-r from-indigo-500 to-pink-600 hover:from-indigo-600 hover:to-pink-700 text-white font-semibold rounded-md shadow-md focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-indigo-500 transition-all duration-150 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled={isSaving || !isDirty || !isValid}
                    >
                        {isSaving ? (
                            <span className="flex items-center">
                                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Saving...
                            </span>
                        ) : (isEditMode ? 'Save Changes' : 'Create Project')}
                    </button>
                </div>
            </form>
        </div>
    );
};

export default ProjectFormPage;
